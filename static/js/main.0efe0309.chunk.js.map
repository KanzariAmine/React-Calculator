{"version":3,"sources":["components/numbers.js","components/InputNum.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Numbers","props","handleNumClick","resetInput","handleEqual","react_default","a","createElement","className","type","value","onClick","InputNum","defaultValue","default","Header","App","state","input","event","target","_this","setState","expr","math","components_Header","components_InputNum","this","numbers","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0efe0309.chunk.js","sourcesContent":["import React from 'react'\n\n const  Numbers = props => {\n   const { handleNumClick, resetInput, handleEqual} = props;\n  return (\n   \n    <div className=\"container\">\n        <div className=\"row\">\n          <input className=\"input_num\" type=\"button\" value= \"7\" onClick={handleNumClick}/>\n          <input className=\"input_num\" type=\"button\" value= \"8\" onClick={handleNumClick}/>\n          <input className=\"input_num\" type=\"button\" value= \"9\" onClick={handleNumClick}/>\n          <input className=\"input_operator\" type=\"button\" value= \"/\" onClick={handleNumClick}/>\n         </div>\n\n         <div className=\"row\">\n          <input className=\"input_num\" type=\"button\" value= \"4\" onClick={handleNumClick}/>\n          <input className=\"input_num\" type=\"button\" value= \"5\" onClick={handleNumClick}/>\n          <input className=\"input_num\" type=\"button\" value= \"6\" onClick={handleNumClick}/>\n          <input className=\"input_operator\" type=\"button\" value= \"*\" onClick={handleNumClick}/>\n         </div>\n         \n        \n         <div className=\"row\">\n          <input className=\"input_num\" type=\"button\" value= \"1\" onClick={handleNumClick}/>\n          <input className=\"input_num\" type=\"button\" value= \"2\" onClick={handleNumClick}/>\n          <input className=\"input_num\" type=\"button\" value= \"3\" onClick={handleNumClick}/>\n          <input className=\"input_operator\" type=\"button\" value= \"+\" onClick={handleNumClick}/>\n        </div>\n\n        <div className=\"row\">\n          <input className=\"input_num\" type=\"button\" value= \".\" onClick={handleNumClick}/>\n          <input className=\"input_num\" type=\"button\" value= \"0\" onClick={handleNumClick}/>\n          <input className=\"input_num\" type=\"button\" value = \"=\" onClick={handleEqual}/>\n          <input className=\"input_operator\" type=\"button\" value= \"-\" onClick={handleNumClick}/>\n        </div>\n\n        <div className=\"row\">\n          <input className=\"input_AC\" type=\"button\" value= \"AC\" onClick={resetInput}/>\n        </div>\n        \n    </div>\n  )\n}\nexport default Numbers;","import React from 'react'\n\nconst  InputNum = props => {\n  return (\n    <input className=\"result\" defaultValue={props.default}/>\n  )\n}\n\nexport default InputNum;\n","import React from 'react'\n\n const Header = () => {\n  return (\n    <header>\n      <h1>React Calculator </h1>\n    </header>\n  )\n}\nexport default Header;","import React, { Component } from 'react';\nimport  * as math from 'mathjs';\nimport Numbers from './components/numbers';\nimport InputNum from './components/InputNum';\nimport Header from './components/Header';\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {\n    input: \"\"\n  }\n\n  handleNumClick = event => {\n    let input = event.target.value\n    this.setState({\n      input: this.state.input + input\n    })\n  }\n\n  handleEqual = () => {\n    let expr = this.state.input;\n    this.setState({input: math.eval(expr)})\n   // math.eval(expr)\n  }\n \n  resetInput = () => {\n    this.setState({\n      input: \"\"\n    })\n  }\n\n\n  render() {\n        return (\n      <div className=\"App\">\n        <Header />\n        <InputNum default={this.state.input}/>\n        <Numbers handleNumClick={this.handleNumClick} resetInput={this.resetInput} handleEqual={this.handleEqual}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}